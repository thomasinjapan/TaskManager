{
  "version": 3,
  "sources": ["../src/EventHandling.ts", "../src/counter.ts", "../src/task.ts", "../src/counter-ui.ts", "../src/task-ui.ts", "../src/app.ts", "../src/bootstrapper.ts"],
  "sourcesContent": ["\uFEFF/** src/eventemitter.ts **/\r\nexport class EventEmitter extends EventTarget {\r\n    protected emit(type: string, args: unknown[]): void {\r\n        this.dispatchEvent(new CustomEvent(type, { detail: args }));\r\n    }\r\n}", "\uFEFF/**  src/counter.ts  **/\r\nimport { EventEmitter } from './EventHandling.js';\r\n\r\nexport class Counter extends EventEmitter {\r\n    private _count: number;\r\n\r\n    constructor(initialValue: number = 0) {\r\n        super();\r\n        this._count = initialValue;\r\n    }\r\n\r\n    get count(): number {\r\n        return this._count;\r\n    }\r\n\r\n    increment(): number {\r\n        this._count += 1;\r\n        this.emit('change', [this.count]);\r\n        console.log(`tried to trigger change`);\r\n        return this._count;\r\n    }\r\n\r\n    decrement(): number {\r\n        this._count -= 1;\r\n        return this._count;\r\n    }\r\n\r\n    reset(): number {\r\n        this._count = 0;\r\n        return this._count;\r\n    }\r\n}", "\uFEFF/**  src/Task.ts  **/\r\nimport { EventEmitter } from './EventHandling.js';\r\n\r\nexport class Task extends EventEmitter {\r\n    private _title: string;\r\n    private _description: string;\r\n\r\n    constructor(initialTitle: string, initialDescription: string) {\r\n        super();\r\n        this._title = initialTitle;\r\n        this._description = initialDescription;\r\n    }\r\n\r\n    get title(): string {\r\n        return this._title;\r\n    }\r\n\r\n    set title(value: string) {\r\n        this._title = value;\r\n        this.emit('title_updated', []);\r\n        this.emit('updated', []);\r\n    }\r\n\r\n    get description(): string{\r\n        return this._description ;\r\n    }\r\n\r\n    set description(value: string) {\r\n        this._description = value;\r\n        this.emit('description_updated', []);\r\n        this.emit('updated', []);\r\n    }\r\n\r\n}", "\uFEFF/**  src/counter-ui.ts  **/\r\nimport { Counter } from './counter.js';\r\n\r\n// UI class for Counter component\r\nexport class CounterUI {\r\n    private _container: HTMLElement;\r\n    private _counter: Counter;\r\n\r\n    private _ui_lblCount: HTMLElement | null = null;\r\n\r\n    private _design: string = `\r\n            <div class=\"counter-container\">\r\n                <h1>TypeScript Counter</h1>\r\n                <div id=\"count-display\">0</div>\r\n                <div>\r\n                    <button id=\"decrement-btn\">Decrement</button>\r\n                    <button id=\"reset-btn\">Reset</button>\r\n                    <button id=\"increment-btn\">Increment</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n    /** Constructor and UI **/\r\n    constructor(container: HTMLElement, counter: Counter) {\r\n        this._container = container;\r\n        this._counter = counter;\r\n\r\n        // Render the counter UI\r\n        this._container.innerHTML = this._design\r\n\r\n        // Get the count display element\r\n        this._ui_lblCount = this.getUIElementById('count-display');\r\n\r\n        // Initialize the display with current count\r\n        this.updateUI();\r\n\r\n        // Setup event listeners\r\n        this.setupEventListeners();\r\n        this.setupCounterEventHandlers();\r\n    }\r\n\r\n    private getUIElementById(id: string): HTMLElement | null {\r\n        return this._container.querySelector(`#${id}`);\r\n    }\r\n\r\n    /** Event handlers **/\r\n    private setupEventListeners(): void {\r\n        const btnIncrement: HTMLElement | null = this.getUIElementById('increment-btn');\r\n        const btnDecrement: HTMLElement | null = this.getUIElementById('decrement-btn');\r\n        const btnReset: HTMLElement | null = this.getUIElementById('reset-btn');\r\n\r\n        if (btnIncrement) {\r\n            btnIncrement.addEventListener('click', this.handleIncrement.bind(this));\r\n        }\r\n\r\n        if (btnDecrement) {\r\n            btnDecrement.addEventListener('click', this.handleDecrement.bind(this));\r\n        }\r\n\r\n        if (btnReset) {\r\n            btnReset.addEventListener('click', this.handleReset.bind(this));\r\n        }\r\n    }\r\n\r\n    private setupCounterEventHandlers(): void {\r\n        // Use a single event listener for all counter events\r\n        this._counter.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n\r\n    private handleIncrement(): void {\r\n        const newCount = this._counter.increment();\r\n        this.updateUI();\r\n    }\r\n\r\n    private handleDecrement(): void {\r\n        const newCount = this._counter.decrement();\r\n        this.updateUI();\r\n    }\r\n\r\n    private handleReset(): void {\r\n        const newCount = this._counter.reset();\r\n        this.updateUI();\r\n    }\r\n\r\n    private onChange(e: Event): void {\r\n        console.log('Counter triggered');\r\n        const [newValue] = (e as CustomEvent).detail;\r\n        console.log('Counter changed to: ',newValue);\r\n    }\r\n\r\n    /** Logic **/\r\n\r\n    updateUI(): void {\r\n        if (!this._ui_lblCount) return;\r\n        this._ui_lblCount.textContent = this._counter.count.toString();\r\n    }\r\n\r\n\r\n\r\n}", "\uFEFF/**  src/task-ui.ts  **/\nimport { Task } from './task.js';\n\nexport class TaskUI {\n    private _container: HTMLElement;\n    private _task: Task;\n\n    private _lblTaskTitle: HTMLElement | null = null\n    private _lblTaskDescription: HTMLElement | null = null;\n\n    private _design: string = `\n            <div class=\"task-ui\">\n                <h1>Task</h1>\n                <div id=\"task-title\">NOT DEFINED</div>\n                <div id=\"task-description\"></div\n            </div>\n        `;\n\n\n    /** Constructor and UI **/\n    constructor(container: HTMLElement, task: Task) {\n        this._container = container;\n        this._task = task;\n\n        // Render the counter UI\n        this._container.innerHTML = this._design\n\n        // Get the display elements to interact with\n        this._lblTaskTitle = this.getUIElementById('task-title')\n        this._lblTaskDescription = this.getUIElementById('task-description');\n\n        // Initialize the display with current count\n        this.updateUI();\n\n        // Setup event listeners\n        this.setupEventListeners();\n        this.setupCounterEventHandlers();\n    }\n\n    private getUIElementById(id: string): HTMLElement | null {\n        return this._container.querySelector(`#${id}`);\n    }\n\n    /** Event handlers **/\n    private setupEventListeners(): void {\n        //none\n    }\n\n    private setupCounterEventHandlers(): void {\n        // Use a single event listener for all counter events\n        this._task.addEventListener('updated', this.onTaskUpdated.bind(this));\n    }\n\n    private onTaskUpdated(e: Event): void {\n        this.updateUI();\n        console.log(`Task was updated`);\n    }\n\n    /** Logic **/\n\n    updateUI(): void {\n        if (!this._lblTaskDescription || !this._lblTaskTitle) return;\n\n        this._lblTaskTitle.textContent = this._task.title.toString();\n        this._lblTaskDescription.textContent = this._task.description.toString();\n    }\n\n\n\n}", "\uFEFF/**  src/start-ui.ts  **/\r\nimport { Counter } from './counter.js';\r\nimport { Task } from './task.js';\r\nimport { CounterUI } from './counter-ui.js';\r\nimport { TaskUI } from './task-ui.js';\r\n\r\n\r\nexport class App {\r\n    private _container: HTMLElement;\r\n\r\n    private _design: string = `\r\n            <div id=\"counter-ui\"></div><br />\r\n            <div id=\"task-ui\"></div><br />\r\n        `;\r\n\r\n\r\n    /** Constructor and UI **/\r\n    constructor(container: HTMLElement) {\r\n        this._container = container\r\n        \r\n        // Render the counter UI\r\n        this._container.innerHTML = this._design\r\n\r\n        // Initialize the display with current count\r\n        this.initializeObjects();\r\n   }\r\n\r\n    private getUIElementById(id: string): HTMLElement | null {\r\n        return this._container.querySelector(`#${id}`);\r\n    }\r\n    initializeObjects(): void {\r\n        // identify HTML elements\r\n        const counterContainer = this.getUIElementById('counter-ui') as HTMLElement;\r\n        const taskContainer = this.getUIElementById('task-ui') as HTMLElement;\r\n\r\n        // Initialize objects\r\n        const counter = new Counter();\r\n        const task = new Task('New Task', 'New Description');\r\n\r\n        //initialize UI\r\n        const counterUI = new CounterUI(counterContainer, counter);\r\n        const taskUI = new TaskUI(taskContainer, task);\r\n    }\r\n\r\n}", "\uFEFF/**  src/bootstrapper.ts  **/\n\nimport { App } from './app.js';\n\n// Wait for DOM to be fully loaded\nfunction initializeApp(): void {\n    const appContainer = document.getElementById('bootstrapper') as HTMLElement;\n    if (!appContainer) {\n        throw new Error('App container not found');\n    }\n    console.log('App container found:');\n\n    // Initialize counter and counter UI\n    const bootstrapper = new App(appContainer);\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeApp);"],
  "mappings": "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",
  "names": []
}
