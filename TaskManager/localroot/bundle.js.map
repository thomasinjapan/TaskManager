{
  "version": 3,
  "sources": ["../src/EventHandling.ts", "../src/counter.ts", "../src/task.ts", "../src/counter-ui.ts", "../src/task-ui.ts", "../src/app.ts", "../src/bootstrapper.ts"],
  "sourcesContent": ["\uFEFF/** src/eventemitter.ts **/\r\nexport class EventEmitter extends EventTarget {\r\n    protected emit<T>(type: string, detail: T): void {\r\n        this.dispatchEvent(new CustomEvent<T>(type, {detail}));\r\n    }\r\n}", "\uFEFF/**  src/counter.ts  **/\r\nimport { EventEmitter } from './EventHandling.js';\r\n\r\nexport namespace Counter {\r\n    export type payloadChanged = {\r\n        newCount: number;\r\n    };\r\n}\r\n\r\nexport class Counter extends EventEmitter {\r\n    private _count: number;\r\n\r\n    /** list of all valid events **/\r\n    public EVENT_CHANGED: string = 'changed';\r\n\r\n    constructor(initialValue: number = 0) {\r\n        super();\r\n        this._count = initialValue;\r\n    }\r\n\r\n    get count(): number {\r\n        return this._count;\r\n    }\r\n\r\n    increment(): number {\r\n        this._count += 1;\r\n        this.emit(this.EVENT_CHANGED, <Counter.payloadChanged>{ newCount: this.count });\r\n        return this._count;\r\n    }\r\n\r\n    decrement(): number {\r\n        this._count -= 1;\r\n        this.emit(this.EVENT_CHANGED, <Counter.payloadChanged>{ newCount: this.count });\r\n        return this._count;\r\n    }\r\n\r\n    reset(): number {\r\n        this._count = 0;\r\n        return this._count;\r\n    }\r\n}", "\uFEFF/**  src/Task.ts  **/\r\nimport { EventEmitter } from './EventHandling.js';\r\n\r\nexport namespace Task {\r\n    export type structPayloadDescription = {\r\n        description: string;\r\n    };\r\n}\r\n\r\nexport class Task extends EventEmitter {\r\n    private _title: string;\r\n    private _description: string;\r\n\r\n    /** list of all valid events **/\r\n    public EVENT_TITLE_UPDATED: string = 'title_updated';\r\n    public EVENT_DESCRIPTION_UPDATED: string = 'description_updated';\r\n    public EVENT_UPDATED: string = 'updated';\r\n  \r\n    constructor(initialTitle: string, initialDescription: string) {\r\n        super();\r\n        this._title = initialTitle;\r\n        this._description = initialDescription;\r\n    }\r\n\r\n    get title(): string {\r\n        return this._title;\r\n    }\r\n\r\n    set title(value: string) {\r\n        this._title = value;\r\n        this.emit(this.EVENT_TITLE_UPDATED, {});\r\n        this.emit(this.EVENT_UPDATED, {});\r\n    }\r\n\r\n    get description(): string {\r\n        return this._description;\r\n    }\r\n\r\n    set description(value: string) {\r\n        this._description = value;\r\n        this.emit(this.EVENT_DESCRIPTION_UPDATED, { description: this._description } as Task.structPayloadDescription);\r\n        this.emit(this.EVENT_UPDATED, {});\r\n    }\r\n}", "\uFEFF/**  src/counter-ui.ts  **/\r\nimport { Counter } from './counter.js';\r\n\r\n// UI class for Counter component\r\nexport class CounterUI {\r\n    private _container: HTMLElement;\r\n    private _counter: Counter;\r\n\r\n    private _lblCount: HTMLElement | null = null;\r\n    private _btnIncrement: HTMLElement | null = null;\r\n    private _btnDecrement: HTMLElement | null = null;\r\n    private _btnReset: HTMLElement | null = null;\r\n\r\n    private _design: string = `\r\n            <div class=\"counter-container\">\r\n                <h1>TypeScript Counter</h1>\r\n                <div id=\"lblCount\">0</div>\r\n                <div>\r\n                    <button id=\"cmdDecrement\">Decrement</button>\r\n                    <button id=\"cmdReset\">Reset</button>\r\n                    <button id=\"cmdIncrement\">Increment</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n    /** Constructor and UI **/\r\n    constructor(container: HTMLElement, counter: Counter) {\r\n        this._container = container;\r\n        this._counter = counter;\r\n\r\n        // Render the counter UI\r\n        this._container.innerHTML = this._design\r\n        \r\n        // Get the count display element\r\n        this._lblCount = this.getUIElementById('lblCount');\r\n\r\n        this._btnIncrement = this.getUIElementById('cmdIncrement');\r\n        this._btnDecrement = this.getUIElementById('cmdDecrement');\r\n        this._btnReset = this.getUIElementById('cmdReset');\r\n        \r\n        // Initialize the display with current count\r\n        this.updateUI();\r\n\r\n        // Setup event listeners\r\n        this.setupEventListeners();\r\n        this.setupCounterEventHandlers();\r\n    }\r\n\r\n    private getUIElementById<T extends HTMLElement>(id: string): T | null {\r\n        return this._container.querySelector(`#${id}`) as T | null;\r\n    }\r\n\r\n    /** Event handlers **/\r\n    private setupEventListeners(): void {\r\n        this._btnIncrement?.addEventListener('click', this.onUIIncrement.bind(this));\r\n        this._btnDecrement?.addEventListener('click', this.onUIDecrement.bind(this));\r\n        this._btnReset?.addEventListener('click', this.onUIReset.bind(this));\r\n    }\r\n\r\n    private setupCounterEventHandlers(): void {\r\n        // Use a single event listener for all counter events\r\n        this._counter.addEventListener(this._counter.EVENT_CHANGED, this.onCounterChange.bind(this));\r\n    }\r\n\r\n    private onUIIncrement(): void {\r\n        const newCount = this._counter.increment();\r\n        this.updateUI();\r\n    }\r\n\r\n    private onUIDecrement(): void {\r\n        const newCount = this._counter.decrement();\r\n        this.updateUI();\r\n    }\r\n\r\n    private onUIReset(): void {\r\n        const newCount = this._counter.reset();\r\n        this.updateUI();\r\n    }\r\n\r\n    private onCounterChange(e: Event): void {\r\n        const args = <Counter.payloadChanged>(e as CustomEvent).detail;\r\n        console.log('Counter triggered');\r\n        console.log('Counter changed to: ', args.newCount);\r\n    }\r\n\r\n    /** Logic **/\r\n\r\n    updateUI(): void {\r\n        if (!this._lblCount) return;\r\n        this._lblCount.textContent = this._counter.count.toString();\r\n    }\r\n}\r\n\r\n", "\uFEFF/**  src/task-ui.ts  **/\r\nimport { Task } from './task.js';\r\n\r\nexport class TaskUI {\r\n    private _container: HTMLElement;\r\n    private _task: Task;\r\n\r\n    private _lblTaskTitle: HTMLElement | null = null\r\n    private _lblTaskDescription: HTMLElement | null = null;\r\n\r\n    private _txtTaskTitle: HTMLInputElement | null = null;\r\n    private _txtTaskDescription: HTMLTextAreaElement | null = null;\r\n\r\n    private _design: string = `\r\n            <div class=\"task-ui\">\r\n                <h1>Task</h1>\r\n                <div id=\"lblTaskTitle\">NOT DEFINED</div>\r\n                <input type=\"text\" id=\"txtTaskTitle\" />\r\n                <div id=\"lblTaskDescription\"></div>\r\n                <textarea id=\"txtTaskDescription\"></textarea>\r\n            </div>\r\n        `;\r\n\r\n\r\n    /** Constructor and UI **/\r\n    constructor(container: HTMLElement, task: Task) {\r\n        this._container = container;\r\n        this._task = task;\r\n\r\n        // Render the counter UI\r\n        this._container.innerHTML = this._design\r\n\r\n        // Get the display elements to interact with\r\n        this._lblTaskTitle = this.getUIElementById<HTMLElement>('lblTaskTitle')\r\n        this._lblTaskDescription = this.getUIElementById<HTMLElement>('lblTaskDescription');\r\n\r\n        this._txtTaskTitle = this.getUIElementById<HTMLInputElement>('txtTaskTitle')\r\n        this._txtTaskDescription = this.getUIElementById<HTMLTextAreaElement>('txtTaskDescription');\r\n\r\n        // Initialize the display with current count\r\n        this.updateUI();\r\n\r\n        // Setup event listeners\r\n        this.setupDOMEventListeners();\r\n        this.setupObjectEventHandlers();\r\n    }\r\n\r\n    private getUIElementById<T extends HTMLElement>(id: string): T | null {\r\n        return this._container.querySelector(`#${id}`) as T | null;\r\n    }\r\n\r\n    /** Event handlers **/\r\n    private setupDOMEventListeners(): void {\r\n        this._txtTaskTitle?.addEventListener('change', this.onTaskTitleChangeUI.bind(this));\r\n        this._txtTaskDescription?.addEventListener('change', this.onTaskDescriptionChangeUI.bind(this));\r\n    }\r\n\r\n    private setupObjectEventHandlers(): void {\r\n        this._task.addEventListener(this._task.EVENT_UPDATED, this.onTaskUpdated.bind(this));\r\n        //this._task.addEventListener(this._task.EVENT_TITLE_UPDATED, this.onTaskUpdated.bind(this));\r\n        this._task.addEventListener(this._task.EVENT_DESCRIPTION_UPDATED, this.onTaskDescriptionUpdated.bind(this));\r\n    }\r\n\r\n    private onTaskTitleChangeUI(e: Event): void {\r\n        this._task.title = (e.target as HTMLInputElement).value;\r\n    }\r\n\r\n    private onTaskDescriptionChangeUI(e: Event): void {\r\n        this._task.description = (e.target as HTMLTextAreaElement).value;\r\n    }\r\n\r\n    private onTaskDescriptionUpdated(e: Event): void {\r\n        var args = (e as CustomEvent<any>).detail as Task.structPayloadDescription ;\r\n        console.log(`Task description was updated: ` + args.description);\r\n    }\r\n\r\n    private onTaskUpdated(e: Event): void {\r\n        this.updateUI();\r\n        console.log(`Task was updated`);\r\n    }\r\n\r\n    /** Logic **/\r\n\r\n    updateUI(): void {\r\n        if (!this._lblTaskDescription || !this._lblTaskTitle) return;\r\n\r\n        this._lblTaskTitle.textContent = this._task.title.toString();\r\n        this._lblTaskDescription.textContent = this._task.description.toString();\r\n    }\r\n\r\n}", "\uFEFF/**  src/app.ts  **/\r\nimport { Counter } from './counter.js';\r\nimport { Task } from './task.js';\r\nimport { CounterUI } from './counter-ui.js';\r\nimport { TaskUI } from './task-ui.js';\r\n\r\n\r\nexport class App {\r\n    private _container: HTMLElement;\r\n\r\n    private _design: string = `\r\n            <div id=\"counter-ui\"></div><br />\r\n            <div id=\"task-ui\"></div><br />\r\n        `;\r\n\r\n\r\n    /** Constructor and UI **/\r\n    constructor(container: HTMLElement) {\r\n        this._container = container\r\n        \r\n        // Render the counter UI\r\n        this._container.innerHTML = this._design\r\n\r\n        // Initialize the display with current count\r\n        this.initializeObjects();\r\n   }\r\n\r\n    private getUIElementById(id: string): HTMLElement | null {\r\n        return this._container.querySelector(`#${id}`);\r\n    }\r\n\r\n    initializeObjects(): void {\r\n        // identify HTML elements\r\n        const counterContainer = this.getUIElementById('counter-ui') as HTMLElement;\r\n        const taskContainer = this.getUIElementById('task-ui') as HTMLElement;\r\n\r\n        // Initialize objects\r\n        const counter = new Counter();\r\n        const task = new Task('New Task', 'New Description');\r\n\r\n        //initialize UI\r\n        const counterUI = new CounterUI(counterContainer, counter);\r\n        const taskUI = new TaskUI(taskContainer, task);\r\n    }\r\n\r\n}", "\uFEFF/**  src/bootstrapper.ts  **/\n\nimport { App } from './app.js';\n\n// Wait for DOM to be fully loaded\nfunction initializeApp(): void {\n    const appContainer = document.getElementById('bootstrapper') as HTMLElement;\n    if (!appContainer) {\n        throw new Error('App container not found');\n    }\n    console.log('App container found:', appContainer);\n\n    // Initialize counter and counter UI\n    const bootstrapper = new App(appContainer);\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeApp);"],
  "mappings": "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",
  "names": []
}
